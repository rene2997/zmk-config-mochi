/*
 * Aidan Smith (2021)
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC    &kp Q     &kp W     &kp E  &kp R      &kp T   &kp Y  &kp U  &kp I           &kp O     &kp P          &kp BSPC
&lt 2 TAB  &kp A     &kp S     &kp D  &kp F      &kp G   &kp H  &kp J  &kp K           &kp L     &kp BACKSLASH  &kp RET
&kp LSHFT  &kp Z     &kp X     &kp C  &kp V      &kp B   &kp N  &kp M  &kp COMMA       &kp DOT   &kp UP_ARROW   &mo 4
&kp LCTRL  &kp LGUI  &kp LALT  &mo 2  &kp SPACE  &trans  &mo 1  &mo 3  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT      &kp C_NEXT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        control {
            bindings = <
&sys_reset  &kp RA(NUMBER_1)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(NUMBER_4)  &kp RA(N5)  &kp RA(NUMBER_6)  &kp RA(NUMBER_7)  &kp RA(NUMBER_8)  &kp RA(NUMBER_9)  &kp RA(NUMBER_0)  &kp DELETE
&trans      &kp F11           &kp F12           &kp F13           &kp F14           &kp F15     &kp F16           &kp F17           &kp F18           &kp F19           &kp F20           &trans
&trans      &kp F1            &kp F2            &kp F3            &kp F4            &kp F5      &kp F6            &kp F7            &kp F8            &kp F9            &kp F10           &trans
&trans      &trans            &trans            &trans            &trans            &trans      &trans            &trans            &trans            &ext_power EP_ON  &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp K_NEXT K_BACK>;
        };

        left {
            bindings = <
&trans  &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0       &trans
&trans  &kp SEMICOLON  &kp APOS      &kp LEFT_BRACKET  &trans        &trans        &trans        &trans        &kp EQUAL     &trans         &kp RIGHT_BRACKET  &kp K_MUTE
&trans  &kp LC(Z)      &trans        &kp LC(C)         &kp LC(V)     &trans        &trans        &trans        &trans        &trans         &kp PG_UP          &trans
&trans  &trans         &trans        &trans            &trans        &trans        &trans        &trans        &kp HOME      &kp PAGE_DOWN  &kp END            &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(K_PASTE) K_COPY>;
        };

        right {
            bindings = <
&kp LS(GRAVE)  &kp LS(N1)            &kp LS(N2)        &kp LS(N3)        &kp RA(NUMBER_3)  &kp LS(N5)  &kp LS(N6)        &kp LS(N7)     &kp RA(N8)     &kp RA(NUMBER_9)  &kp LS(N0)           &kp LS(MINUS)
&trans         &kp RA(NUMBER_1)      &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(NUMBER_4)  &kp RA(N5)  &kp RA(NUMBER_6)  &kp RA(EQUAL)  &trans         &trans            &kp RS(RIGHT_BRACE)  &kp RA(NUMBER_2)
&trans         &kp NON_US_BACKSLASH  &trans            &trans            &trans            &trans      &trans            &trans         &kp RS(COMMA)  &kp RS(PERIOD)    &kp RS(SLASH)        &trans
&trans         &trans                &trans            &trans            &trans            &trans      &trans            &trans         &trans         &trans            &trans               &trans
            >;
        };

        Shift {
            bindings = <
&trans  &kp RS(NUMBER_1)          &kp RS(NUMBER_2)  &kp RS(NUMBER_3)  &kp LC(LA(N5))  &kp RS(NUMBER_5)  &kp RS(NUMBER_6)  &kp RS(NUMBER_7)  &kp LS(N8)             &kp LS(N9)     &kp LS(N0)           &kp MINUS
&trans  &trans                    &trans            &trans            &trans          &trans            &trans            &kp RA(EQUAL)     &trans                 &trans         &kp RS(RIGHT_BRACE)  &kp RS(BACKSLASH)
&trans  &kp LS(NON_US_BACKSLASH)  &trans            &trans            &trans          &trans            &trans            &trans            &kp RS(COMMA)          &kp RS(DOT)    &kp SLASH            &trans
&trans  &trans                    &trans            &trans            &trans          &trans            &trans            &trans            &kp RS(RA(BACKSLASH))  &kp RS(SLASH)  &kp RS(RA(SLASH))    &kp C_PREVIOUS
            >;
        };

        RightAndShift {
            bindings = <
&trans  &trans                &trans  &kp RA(NUMBER_4)  &trans  &trans  &trans  &kp RA(NON_US_BACKSLASH)  &kp RA(N7)  &kp RA(N0)  &trans                 &kp MINUS
&trans  &trans                &trans  &trans            &trans  &trans  &trans  &trans                    &trans      &trans      &kp RA(RIGHT_BRACKET)  &trans
&trans  &kp NON_US_BACKSLASH  &trans  &trans            &trans  &trans  &trans  &trans                    &trans      &trans      &trans                 &trans
&trans  &trans                &trans  &trans            &trans  &trans  &trans  &trans                    &trans      &trans      &trans                 &trans
            >;
        };

        LeftAndRight {
            bindings = <
&trans  &trans  &trans  &kp PRINTSCREEN  &kp LS(LG(S))  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans           &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        AppleWiring {
            if-layers = <3 4>;
            then-layer = <5>;
        };

        AppleWiring2 {
            if-layers = <2 3>;
            then-layer = <6>;
        };
    };
};
